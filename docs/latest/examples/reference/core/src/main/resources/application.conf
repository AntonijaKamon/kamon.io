# tag:context-codecs:start
kamon.context.codecs {

  # Codecs to be used when propagating a Context through a HTTP Headers transport.
  http-headers-keys {
    span = "kamon.trace.SpanCodec$B3"
  }

  # Codecs to be used when propagating a Context through a Binary transport.
  binary-keys {
    span = "kamon.trace.SpanCodec$Colfer"
  }
}
# tag:context-codecs:end


# tag:string-keys:start
kamon.context.codecs {

  # If the application must read any of these keys it is necessary to create a
  # broadcast string key with a matching name and read the value from the context:
  #
  # val requestIDKey = Key.broadcastString("request-id") // Do this only once, keep a reference.
  # val requestID = Kamon.currentContext().get(requestIDKey)
  #
  string-keys {
    request-id = "X-Request-ID"
  }
}
# tag:string-keys:end

# tag:filters:start
kamon.util.filters {
  my-custom-filter {
    includes = [ "hello/**", "test1" ]
    excludes = [ "goodbye" ]
  }

  "explicit.matcher.type" {
    includes = [ "glob:hello/**", "regex:test[0-9]" ]
    excludes = [ "glob:goodbye" ]
  }
}
# tag:filters:end


